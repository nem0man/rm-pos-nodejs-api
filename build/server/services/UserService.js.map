{"version":3,"sources":["../../../api/server/services/UserService.js"],"names":["UserService","database","User","findAll","newUser","create","id","updateUser","findOne","where","Number","userToUpdate","update","theUser","userToDelete","destroy","deletedUser"],"mappings":";;;;;;;;;;;;;;;;;AAAA;;IAEMA,W;;;;;;;;;;;;;;;;;;;uBAGaC,mBAASC,IAAT,CAAcC,OAAd,E;;;;;;;;;;;;;;;;;;;;;;;;;;;;;qDAMIC,O;;;;;;;uBAEJH,mBAASC,IAAT,CAAcG,MAAd,CAAqBD,OAArB,C;;;;;;;;;;;;;;;;;;;;;;;;;;;;;qDAMOE,E,EAAIC,W;;;;;;;;uBAEGN,mBAASC,IAAT,CAAcM,OAAd,CAAsB;AAC/CC,kBAAAA,KAAK,EAAE;AAAEH,oBAAAA,EAAE,EAAEI,MAAM,CAACJ,EAAD;AAAZ;AADwC,iBAAtB,C;;;AAArBK,gBAAAA,Y;;qBAIFA,Y;;;;;;uBACIV,mBAASC,IAAT,CAAcU,MAAd,CAAqBL,WAArB,EAAiC;AAAEE,kBAAAA,KAAK,EAAE;AAAEH,oBAAAA,EAAE,EAAEI,MAAM,CAACJ,EAAD;AAAZ;AAAT,iBAAjC,C;;;kDAECC,W;;;kDAEF,I;;;;;;;;;;;;;;;;;;;;;;;;;;qDAMWD,E;;;;;;;;uBAEIL,mBAASC,IAAT,CAAcM,OAAd,CAAsB;AAC1CC,kBAAAA,KAAK,EAAE;AAAEH,oBAAAA,EAAE,EAAEI,MAAM,CAACJ,EAAD;AAAZ;AADmC,iBAAtB,C;;;AAAhBO,gBAAAA,O;kDAICA,O;;;;;;;;;;;;;;;;;;;;;;;;;;qDAMaP,E;;;;;;;;uBAEOL,mBAASC,IAAT,CAAcM,OAAd,CAAsB;AAAEC,kBAAAA,KAAK,EAAE;AAAEH,oBAAAA,EAAE,EAAEI,MAAM,CAACJ,EAAD;AAAZ;AAAT,iBAAtB,C;;;AAArBQ,gBAAAA,Y;;qBAEFA,Y;;;;;;uBACwBb,mBAASC,IAAT,CAAca,OAAd,CAAsB;AAC9CN,kBAAAA,KAAK,EAAE;AAAEH,oBAAAA,EAAE,EAAEI,MAAM,CAACJ,EAAD;AAAZ;AADuC,iBAAtB,C;;;AAApBU,gBAAAA,W;kDAGCA,W;;;kDAEF,I;;;;;;;;;;;;;;;;;;;;;;;;;eAOEhB,W","sourcesContent":["import database from '../src/models';\n\nclass UserService {\n  static async getAllUsers() {\n    try {\n      return await database.User.findAll();\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  static async addUser(newUser) {\n    try {\n      return await database.User.create(newUser);\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  static async updateUser(id, updateUser) {\n    try {\n      const userToUpdate = await database.User.findOne({\n        where: { id: Number(id) }\n      });\n\n      if (userToUpdate) {\n        await database.User.update(updateUser, { where: { id: Number(id) } });\n\n        return updateUser;\n      }\n      return null;\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  static async getAUser(id) {\n    try {\n      const theUser = await database.User.findOne({\n        where: { id: Number(id) }\n      });\n\n      return theUser;\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  static async deleteUser(id) {\n    try {\n      const userToDelete = await database.User.findOne({ where: { id: Number(id) } });\n\n      if (userToDelete) {\n        const deletedUser = await database.User.destroy({\n          where: { id: Number(id) }\n        });\n        return deletedUser;\n      }\n      return null;\n    } catch (error) {\n      throw error;\n    }\n  }\n}\n\nexport default UserService;\n"],"file":"UserService.js"}