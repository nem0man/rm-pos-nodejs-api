{"version":3,"sources":["../../api/test/test.js"],"names":["chai","use","chatHttp","expect","describe","it","done","user","firstName","lastName","email","request","app","post","set","send","end","err","res","status","to","equal","body","data","include","id","book","get","should","have","property","userId","eql","updatedUser","put"],"mappings":"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","sourcesContent":["import chai from 'chai';\nimport chatHttp from 'chai-http';\nimport 'chai/register-should';\nimport app from '../index';\n\nchai.use(chatHttp);\nconst { expect } = chai;\n\ndescribe('Testing the user endpoints:', () => {\n  it('It should create a user', (done) => {\n    const user = {\n      firstName: 'Phalla',\n      lastName: 'Mot',\n      email: 'motthearith@gmail.com'\n    };\n    chai.request(app)\n      .post('/api/v1/users')\n      .set('Accept', 'application/json')\n      .send(user)\n      .end((err, res) => {\n        expect(res.status).to.equal(201);\n        expect(res.body.data).to.include({\n          id: 1,\n          firstName: user.firstName,\n          lastName: user.lastName,\n          email: user.email\n        });\n        done();\n      });\n  });\n\n  it('It should not create a user with incomplete parameters', (done) => {\n    const book = {\n      firstName: 'Mot',\n      email: 'motthearith@gmail.com'\n    };\n    chai.request(app)\n      .post('/api/v1/users')\n      .set('Accept', 'application/json')\n      .send(book)\n      .end((err, res) => {\n        expect(res.status).to.equal(400);\n        done();\n      });\n  });\n\n  it('It should get all users', (done) => {\n    chai.request(app)\n      .get('/api/v1/users')\n      .set('Accept', 'application/json')\n      .end((err, res) => {\n        expect(res.status).to.equal(200);\n        res.body.data[0].should.have.property('id');\n        res.body.data[0].should.have.property('firstName');\n        res.body.data[0].should.have.property('lastName');\n        res.body.data[0].should.have.property('email');\n        done();\n      });\n  });\n\n  it('It should get a particular user', (done) => {\n    const userId = 1;\n    chai.request(app)\n      .get(`/api/v1/users/${userId}`)\n      .set('Accept', 'application/json')\n      .end((err, res) => {\n        expect(res.status).to.equal(200);\n        res.body.data.should.have.property('id');\n        res.body.data.should.have.property('firstName');\n        res.body.data.should.have.property('lastName');\n        res.body.data.should.have.property('email');\n        done();\n      });\n  });\n\n  it('It should not get a particular user with invalid id', (done) => {\n    const userId = 8888;\n    chai.request(app)\n      .get(`/api/v1/users/${userId}`)\n      .set('Accept', 'application/json')\n      .end((err, res) => {\n        expect(res.status).to.equal(404);\n        res.body.should.have.property('message').eql(`Cannot find user with the id ${userId}`);\n        done();\n      });\n  });\n\n  it('It should not get a particular user with non-numeric id', (done) => {\n    const userId = 'aaa';\n    chai.request(app)\n      .get(`/api/v1/users/${userId}`)\n      .set('Accept', 'application/json')\n      .end((err, res) => {\n        expect(res.status).to.equal(400);\n        res.body.should.have.property('message').eql('Please input a valid numeric value');\n        done();\n      });\n  });\n\n  it('It should update a user', (done) => {\n    const userId = 1;\n    const updatedUser = {\n      id: userId,\n      firstName: 'Thearith',\n      lastName: 'Mot',\n      email: 'avb@yahoo.com'\n    };\n    chai.request(app)\n      .put(`/api/v1/users/${userId}`)\n      .set('Accept', 'application/json')\n      .send(updatedUser)\n      .end((err, res) => {\n        expect(res.status).to.equal(200);\n        expect(res.body.data.id).equal(updatedUser.id);\n        expect(res.body.data.firstName).equal(updatedUser.firstName);\n        expect(res.body.data.lastName).equal(updatedUser.lastName);\n        expect(res.body.data.email).equal(updatedUser.email);\n        done();\n      });\n  });\n\n  it('It should not update a user with invalid id', (done) => {\n    const userId = '9999';\n    const updatedUser = {\n      id: userId,\n      firstName: 'Thearith',\n      lastName: 'Mot',\n      email: 'motthearith@gmail.com'\n    };\n    chai.request(app)\n      .put(`/api/v1/users/${userId}`)\n      .set('Accept', 'application/json')\n      .send(updatedUser)\n      .end((err, res) => {\n        expect(res.status).to.equal(404);\n        res.body.should.have.property('message').eql(`Cannot find user with the id: ${userId}`);\n        done();\n      });\n  });\n\n  it('It should not update a user with non-numeric id value', (done) => {\n    const userId = 'ggg';\n    const updatedUser = {\n      id: userId,\n      firstName: 'Thearith',\n      lastName: 'Mot',\n      email: 'motthearith@gmail.com'\n    };\n    chai.request(app)\n      .put(`/api/v1/users/${userId}`)\n      .set('Accept', 'application/json')\n      .send(updatedUser)\n      .end((err, res) => {\n        expect(res.status).to.equal(400);\n        res.body.should.have.property('message').eql('Please input a valid numeric value');\n        done();\n      });\n  });\n\n\n  it('It should delete a user', (done) => {\n    const userId = 1;\n    chai.request(app)\n      .delete(`/api/v1/users/${userId}`)\n      .set('Accept', 'application/json')\n      .end((err, res) => {\n        expect(res.status).to.equal(200);\n        expect(res.body.data).to.include({});\n        done();\n      });\n  });\n\n  it('It should not delete a user with invalid id', (done) => {\n    const userId = 777;\n    chai.request(app)\n      .delete(`/api/v1/users/${userId}`)\n      .set('Accept', 'application/json')\n      .end((err, res) => {\n        expect(res.status).to.equal(404);\n        res.body.should.have.property('message').eql(`User with the id ${userId} cannot be found`);\n        done();\n      });\n  });\n\n  it('It should not delete a user with non-numeric id', (done) => {\n    const userId = 'bbb';\n    chai.request(app)\n      .delete(`/api/v1/users/${userId}`)\n      .set('Accept', 'application/json')\n      .end((err, res) => {\n        expect(res.status).to.equal(400);\n        res.body.should.have.property('message').eql('Please provide a numeric value');\n        done();\n      });\n  });\n});\n"],"file":"test.js"}